namespace _02._Operator
{
	internal class Program
	{
		static void Main(string[] args)
		{
			bool bValue = false;
			int iValue = 0;
			float fValue = 0.0f;


			/* * * * * * *  
			 * 연산자(Operator)
			 * 
			 * 프로그래밍 언어에서는 일반적인 수학 연산과 유사한 연산자들이 지원됨
             * C++는 여러 연산자를 제공하며 기본 연산을 수행할 수 있음
			 * * * * * * */

			/* * * * * * *  
			 * 산술 연산자
			 * * * * * * */
			/*
			// <이진 연산자>
			int i = 0;
			float f = 0.0f;

			i = 2 + 3;
			i = 3 - 1;
			i = 3 * 3;
			f = 5f / 2f;    // 나누기(몫)
							// 주의! 5/2와 같이 int의 나눗셈은 나머지가 버려짐
			i = 13 % 3;     // 나머지

			// <단항 연산자>
			i = -8;

			i = +i;     // + 단항연산자(양수) : 값을 그대로 반환
			i = -i;     // - 단항연산자(음수) : 값의 마이너스를 반환
			++i;        // 전위증가, 원래 값에 1 더하기 = (i = i  + 1)
			i++;        // 후위증가, 원래 값에 1 더하기
			--i;        // 전위감소, 원래 값에 1 빼기 = (i = i - 1)
			i--;        // 후위증가, 원래 값에 1 빼기

			// <전위연산자와 후위연산자>
			// 전위연산자 : 값을 반환하기 전에 연산
			// 일단 먼저 증가/감소하고나서 사용.
			// 더하고 값 불러오기
			i = 5;
			Console.WriteLine(i);       // output : 5
			Console.WriteLine(++i);     // output : 6
			Console.WriteLine(i);       // output : 6
										// 후위연산자 : 값을 반환한 후에 연산
										// 값을 먼저 사용하고 증가/감소하기.
										// 값 불러오고 더하기
			i = 5;
			Console.WriteLine(i);       // output : 5
			Console.WriteLine(i++);     // output : 5
			Console.WriteLine(i);       // output : 6

			*/

			/* * * * * * *  
			 * 대입 연산자
			 * * * * * * */
			/*
			// <대입 연산자>
			i = 10;     // = 대입연산자 : 오른쪽의 값을 왼쪽 변수에 대입

			// <복합 대입 연산자>
			// 이진 연산자(op)일 경우
			// x op= y -> x = x op y 와 동일
			i += 5;     // i = i + 5; 와 동일
			*/

			/* * * * * * *  
			 * 비교 연산자
			 * * * * * * */
			/*
			// <비교 연산자>
			// 비교 연산자의 결과는 true, false로 나오기 때문에 bool 자료형에 저장.
			bool b;
			b = 3 > 1;  // 왼쪽 데이터가 더 크면 true
			b = 3 < 1;  // 오른쪽 데이터가 더 크면 true
			b = 3 >= 5; // 왼쪽 데이터가 더 크거나 같으면 true
			b = 3 <= 5; // 오른쪽 데이터가 더 크거나 같으면 true
			b = 3 == 3; // 두 데이터가 같은 경우 true
			b = 3 != 3; // 두 데이터가 다른 경우 true
			*/

			/* * * * * * *  
			 * 논리 연산자
			 * * * * * * */
			/*
			// <논리 연산자>
			b = !false;         //!(Not) :  true -> false, false -> true.
			b = true && false;  // &&(And) : 모두 true 일 경우 true
			b = true || false;  // ||(Or) : 하나라도 true 일 경우에 true
			b = true ^ false;   // ^(Xor) : 두 데이터 모두 다를 경우에 true

			// <조건부 논리 연산자>
			// 조건부 논리 And 연산자 &&


			// 조건부 논리 Or 연산자 ||
			i = 10;
			// b = true || (i++ < 5);
			// 방법 1
			b = (i++ < 5) || true;

			// 방법 2
			b = true || (i < 5);
			i++;
			Console.WriteLine(i);
			// true || 를 본 순간 i++를 처리하지 않기때문에 i 값이 증가하지 않음!! 문제!!
			*/

			/* * * * * * *  
			 * 비트 연산자 (비트 단위로 연산하는 연산자들)
			 * * * * * * */
			/*
			// <단항 연산자>		//0b--- 2진수, 0x--- 16진수
			i = ~0x1f;  // ~(비트 보수) : 1001 -> 0110

			// <이진 연산자>
			i = 0x11 & 0x83;	// &(And)
			i = 0x11 | 0x83;	// |(Or)
			i = 0x11 ^ 0x83;	// ^(Xor)

			// <비트 쉬프트 연산자>
			// 많이 쓰인다. 0010 << 1 -> 0100 << 1 -> 1000 
			i = 0x10 << 1;  // << : 값 2배로
			i = 0x10 >> 1;  // >> : 값 1/2배

			// 100 / 2 보다 100 * (0.5) 가 훨씬 빠르다..
			// 100 * (0.5) 보다 100 >> 1 이 훨씬 빠르다..

			*/

			/* * * * * * *  
			 * 연산자 우선순위
			 * 
			 * 여러 연산자가 있는 식에서 우선 순위가 높은 연산자가 먼저 계산
			 * * * * * * */
			/*
			// <연산자 우선순위>
			// 1. 기본 연산        : a[i], x++, x--
			// 2. 단항 연산        : +x, -x, !x, ~x, ++x, --x, (Type)x
			// 3. 곱하기 연산      : x * y, x / y, x % y
			// 4. 더하기 연산      : x + y, x - y
			// 5. 시프트 연산      : x << y, x >> y
			// 6. 비교 연산        : x < y, x > y, x <= y, x >= y
			// 7. 같음 연산        : x == y, x != y
			// 8. 논리 AND 연산    : x & y, x && y
			// 9. 논리 XOR 연산    : x ^ y
			// 10. 논리 OR 연산    : x | y, x || y
			// 11. 대입 연산       : x = y, x op= y
			*/

		}
	}
}